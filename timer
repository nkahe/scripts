#!/usr/bin/env bash
# Bash countdown timer

# Forked, made more modern and extended from script written by Timothy Lin.
# https://github.com/lzh9102/bash-countdown

set -o errexit   # abort on non-zero exit status
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

interrupt_message="Countdown stopped by user interrupt."

# Settings below should be either "true" or "false".
show_progress_bar="false"  # Progress bar visibility.
update_tab_title="true"    # Print countdown time to tab title.
CLEAR_SCREEN="false"       # Clear screen at timeup.
debug_mode="false"         # Print debug.
be_silent="false"          # Run silently no output during countdown.

readonly PAT_HMS="^([0-9]+):([0-9]+):([0-9]+)$"
readonly PAT_MS="^([0-9]+):([0-9]+)$"
readonly PAT_M="^([0-9]+)$"
readonly PAT_H_VERBAL="^([0-9]+)h(.*)"
readonly PAT_M_VERBAL="^([0-9]+)m(.*)"
readonly PAT_S_VERBAL="^([0-9]+)s(.*)"
readonly VERSION="0.1"
readonly SEC_PER_MIN=60
readonly SEC_PER_HOUR=$((SEC_PER_MIN * 60))
readonly SEC_PER_DAY=$((SEC_PER_HOUR * 24))
TIME_NOW=$(date +%s)

total_time=0

function show_hint () {
echo "\
Timer can be set to count amount of time or until given clock time. One of three
different forms can be used

Usage, countdown amount of time
  $("basename" "$0") <number>[suffix]... [options]
  $("basename" "$0") [hours][minutes:]<seconds> [options]

  Suffix can be: [s]econds, [m]inutes (default) or [h]ours. If many are given
  sum of values is used.

Countdown until given time:
  $("basename" "$0") [-f | --force] at [hours:][minutes:]seconds [options] [message]

Examples:
  $("basename" "$0") 10 && echo 'Remember the oven'   Countdown 10 minutes.
  $("basename" "$0") 4m && notify-send 'Tea is ready!'   Coundown 4 minutes with notification.
  $("basename" "$0") 3m 30s   Countdown 3 minutes and 30 seconds
  $("basename" "$0") 2:25     Countdown 2 minutes and 25 seconds
  $("basename" "$0") 3:15:00  Countdown 3 hours and 15 minutes.
  $("basename" "$0") at 22:15 Countdown until 22:15 o'clock (10:15 PM).

Options:
  -f, --force   Force execute. This option must be located before 'at'.
  -h, --help    Display this help and exit.
  -b, --bar     Show a progress bar.
  -s, --silent  Do not show any output during countdown.
  -v, --version Show version info."
}

# If no parameters is given.
if [[ $# -eq 0 ]]; then
    show_hint
    exit 1
fi

# Get seconds from (hours,minutes,seconds)
# usage: print_seconds <days> <hours> <minutes> <seconds>
function print_seconds () {
    if [[ $# -ne 4 ]]; then
        echo "Error: function print_seconds takes 4 parameters" >&2
        exit 1
    fi
    # hours, minutes, seconds
    result=$(( $2 * 3600 + $3 * 60 + $4 ))
    echo "$result"
}

# Correct date by trying to add some time to it.
# usage: correct_date_sec seconds
function correct_date_sec () {
    final=$1
    if [[ "$final" -gt 0 ]]; then
        echo "$final"
        return
    fi
    final=$(( $1 + SEC_PER_DAY ))
    if [[ "$final" -gt 0 ]]; then
        echo "$final"
        return
    fi
    echo "0"
}


# Assign number of seconds by print_seconds based on timer format.
function assign_time () {
    if [[ "$parameter" =~ $PAT_HMS ]]; then          # H:M:S
        sec_rem=$(print_seconds 0 BASH_REMATCH[1] BASH_REMATCH[2] BASH_REMATCH[3])
    elif [[ "$parameter" =~ $PAT_MS ]]; then         # M:S
        sec_rem=$(print_seconds 0 0 BASH_REMATCH[1] BASH_REMATCH[2])
    elif [[ "$parameter" =~ $PAT_M ]]; then          # M
        sec_rem=$(print_seconds 0 0 BASH_REMATCH[1] 0)
    # Verbal formats
    elif [[ "$parameter" =~ $PAT_S_VERBAL ]]; then   # <number>s[econds]
        sec_more=$(print_seconds 0 0 0 BASH_REMATCH[1])
    # Add to existing time so they can be combined.
        sec_rem=$(( sec_rem + sec_more))
    elif [[ "$parameter" =~ $PAT_M_VERBAL ]]; then   # <number>m[inutes]
        sec_more=$(print_seconds 0 0 BASH_REMATCH[1] 0)
        sec_rem=$(( sec_rem + sec_more))
    elif [[ "$parameter" =~ $PAT_H_VERBAL ]]; then   # <number>h[ours]
        sec_more=$(print_seconds 0 BASH_REMATCH[1] 0 0)
        sec_rem=$(( sec_rem + sec_more))
    else
        if [[ "${previous_parameter:0:1}" == "-" ]]; then
            echo "Error: Not a valid option: \"$previous_parameter\". \
Type $("basename" "$0") -h for available options." >&2
            exit 1
        else
            echo "Error: Incorrect time format: \"$parameter\". \
Type \"$("basename" "$0") -h\" for help." >&2
            exit 1
        fi
    fi
}

# Set countdown at certain clock time.
function set_at_time() {
    UNTIL=$(date -d "$parameter" +%s)
    if [[ $? -ne 0 ]]; then
        exit 1
    fi
    sec_rem=$(( UNTIL - TIME_NOW ))
    if [[ $sec_rem -lt 1 ]]; then
        sec_rem=$(correct_date_sec $sec_rem)
        if [[ "$sec_rem" -lt 1 ]]; then
            echo "Error: The date $parameter is already history." >&2
            exit 1
        fi
        # there's no "-f" option
        if [[ -z "$NO_CONFIRM" ]]; then
            # confirm for the correction
            echo "Warning: The given date is assumed to be: $(date -d now\ +"$sec_rem"\ sec)"
            echo "Place an option -f before -d to suppress this warning"
            read -n 1 -p -r "Still proceed [Y]/n?" ch
            echo
            if [[ "$ch" == "n" || "$ch" == "N" ]]; then
                exit 1
            fi
            ch=""
        fi
    fi
}

# Parse command line options
sec_rem=0      # remaining seconds
previous_parameter=""
while [[ $# -gt 0 ]]; do
    parameter=$1; shift
    if [[ "${parameter:0:1}" == "-" ]]; then
        case "$parameter" in
            -f | --force  ) NO_CONFIRM=true ;;
            -b | --bar    ) show_progress_bar=true ;;
            -h | --help   ) show_hint && exit 0 ;;
            -s | --silent ) be_silent=true ;;
            -v | --version) echo "Terminal Timer version: " $VERSION && exit 0 ;;
            *) echo "Error: Not a valid option: \"$parameter\". \
Type $("basename" "$0") -h for available options." >&2
            exit 1
        esac
        previous_parameter="$parameter"
        continue
    fi
    if [[ "$parameter" == at ]]; then
      previous_parameter="$parameter"
      continue
    fi
    case "$previous_parameter" in
        at ) set_at_time ;;
        *) assign_time ;;
    esac
    previous_parameter=""
done

# check whether a correct time is assigned
if [[ $sec_rem -eq 0 ]]; then
    # TODO: ajan asettamiseen liittyvän ohjeistuksen voisi näyttää.
    echo "Error: Incorrect time format: $parameter" >&2
    exit 1
fi

# calculate the date when time up
until_date=$(( TIME_NOW + sec_rem ))

# Total countdown time in seconds. This is constant unlike sec_rem.
total_time=$(( until_date - $(date +%s) ))

# Quit gracefully during countdown.
# usage: cleanup_and_exit <exit code> [quit message]
function cleanup_and_exit () {
    tput cnorm  # Restore cursor
    stty echo   # Restore keyboard echo

    if [[ $CLEAR_SCREEN == true ]]; then
        clear
    elif [[ -n "${2:-}" ]]; then
        echo -e "\n$2"
    fi

    exit "$1"
}

# set the quit function to be the Control+C handler
trap 'cleanup_and_exit 1 "$interrupt_message"' INT

# Print terminal tab title
# Usage: print_title <title>
function print_title () {
    # Some terminals accept only different commands.
    case "$terminal" in
        yakuake)
            # Doesn't work if we are root.
            [[ "$EUID" == 0 ]] && return
            # Yakuake uses qdbus to set titles.
            qdbus org.kde.yakuake /yakuake/tabs setTabTitle "$session_id" "$tab_title"
            ;;
        terminator)
            printf '\033]0;%s\a' "$tab_title" ;;
        *)
            printf '\e]1;%s\a' "$tab_title"  ;;
    esac
}

# checks if we are running terminal which needs different commands for settings
# a tab title.ausage: check_terminal
function check_terminal () {
    terminal=$(ps -o comm= -p $(ps -o ppid= -p "$PPID"))
    if [[ $terminal == yakuake ]]; then
        # .. find find out the right Yakuake session_id if we aren't root.
        # It's used to send commands to Yakuake like to set tab titles in titles.zsh.
        if [[ $UID != 0 ]]; then
            session_id=$(qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.activeSessionId)
        fi
    fi
}


# Defaults for progress bar
col=$(tput cols)
col=$(( col -5 ))

# print a progress bar
# usage: show_progress_bar <number of lines needed for time>
function show_progress_bar () {
    # Tämän pitäis mennä kuin sekunnit eteenpäin, mutta menee hieman nopeampaa ja
    # epäsynkkaan.

    # Progress bar character length
    bar_length=$(( col * progress_percent / 100 ))
    # sec_done=$[$total_time - $sec_rem]
    printf "["

    # Assign output to variable f which is used in next command.
    printf -v f "%${bar_length}s>"

    # printf -v f "%$(echo $bar_length)s>"
    printf "%s\r" "${f// /=}"

    # Cursor placement for end of progress bar.
    tput cup $(( $1 + 5 )) $(( col + 2 ))

    printf "]\n\n"
    if [[ $debug_mode == "true" ]]; then
        echo "Debug:                       "
        echo "Total time: " $total_time "  "
        echo "Remaining:  " $sec_rem "     "
        echo "Bar length  " $bar_length "  "
        echo "                             "
    fi
}

# If silent attribute is given countdown with no output.
function silent_countdown() {
    while [[ $sec_rem -gt 0 ]]; do
        # calculate remaining seconds
        sec_rem=$(( until_date - TIME_NOW ))
        progress_percent=$(( (total_time - sec_rem) * 100 / total_time ))
        read -r -n 1 -t 1 ch
        if [[ "$ch" == q ]]; then
            cleanup_and_exit 1 "$interrupt_message"
        fi
    done
    cleanup_and_exit 0
}

# Calculate the date of timeout
TIMEOUT_DATE=$(date -d "now +$sec_rem sec" )

function if_running_background() {
    [[ $(ps -o stat= -p $$) != *+* ]]
}

if [[ $be_silent == true ]] || if_running_background; then
    silent_countdown
fi

check_terminal
clear
# tput cup 0 0
tput civis  # hide cursor
stty -echo  # disable keyboard echo

lines=0

# Countdown
while [[ $sec_rem -gt 0 ]]; do
    # Calculate remaining seconds
    sec_rem=$(( until_date - $(date +%s) ))

    progress_percent=$(( (total_time - sec_rem) * 100 / total_time ))

    interval=$sec_rem
    seconds=$(( interval % SEC_PER_MIN ))
    interval=$(( interval - seconds ))
    minutes=$(( interval % SEC_PER_HOUR / SEC_PER_MIN ))
    interval=$(( interval - minutes ))
    hours=$(( interval % SEC_PER_DAY / SEC_PER_HOUR ))
    interval=$(( interval - hours ))

    if [[ $update_tab_title != "false" ]]; then
        # Format nice remaining time for a tab title.
        if [ $hours -gt 0 ]; then
            tab_title=$(printf "%1d:%02d:%02d" "$hours" "$minutes" "$seconds")
        elif [ $minutes -gt 0 ]; then
            tab_title=$(printf "%1d:%02d" "$minutes" "$seconds")
        else
            tab_title=$seconds
        fi
        print_title $tab_title
    fi
    tput home # move cursor back to (0,0)

    echo "Now:   $(date)"
    echo "Until: $TIMEOUT_DATE"

    printf "%0.s-" {1..35}; echo

    # Check how many lines we need for output once.
    if [[ $lines == 0 ]]; then
        if [ $hours -gt 0 ]; then
            readonly lines=3
        elif [ $minutes -gt 0 ]; then
            readonly lines=2
        else
            readonly lines=1
        fi
    fi

    # Print necessary lines based on the amount needed at start.
    [[ $lines -ge 3 ]] && echo "Hours:    $hours                     "
    [[ $lines -ge 2 ]] && echo "Minutes:  $minutes                   "
    printf "Seconds:  $seconds"
    printf "%0.s " {1..33}
    echo -e "\nProgress: $progress_percent %                 "
    printf "%0.s " {1..33}
    echo

    [[ $show_progress_bar == true ]] && show_progress_bar "$lines"

    echo "Press [q] to stop counting           "

    # Wait a second and quit if user press 'q' else continue.
    read -n 1 -t 1 ch || true
    [[ "$ch" == "q" ]] && cleanup_and_exit 1 "$interrupt_message"
done

cleanup_and_exit 0
# vim: set expandtab shiftwidth=4 softtabstop=4 :
