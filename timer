#!/bin/bash
# Bash countdown timer

# Forked, made more modern and extended from script written by Timothy Lin.
# https://github.com/lzh9102/bash-countdown

# TODO:

# -h/--help pyytää nyt aikaa.
# - -d --daemon -optio. ajetaan kokonaan taustalla.
#     kävis näin: echo 'sleep N; {command}' | at now tai
#     (sleep N; {command}) &
  
# - jos nykyinen ja timeup -aika on samalla vuorokaudella, tulosta vain kellon
#   aika (date +%T)
# - timerin ajo taustalle &:lla toimimaan kunnolla.
# - samoin jos käyttää Ctrl-z, että kursori palautuisi.
# - optio, jolla figletillä printataan jäljellä oleva aika samassa muodossa,
#   kuin tabi-tekstissä.

# standard inputista lukeminen
# https://stackoverflow.com/questions/18761209/how-to-make-a-bash-function-which-can-read-from-standard-input

# FIXME

# -t ei toiminut.
# --help kysyy messagea.
# interrupt messagea  ei tule enää.

#set -o errexit   # abort on nonzero exitstatus
#set -o nounset   # abort on unbound variable
#set -o pipefail  # don't hide errors within pipes

# This should be set in bash_profile / .zprofile:

EXEC_COMMAND="$HOME/sounds/hackers_evolution/voice-complete.wav &>>/dev/null &"

# If settings variables are not defined, use defaults.

# If you want to set command to execute on timeup put this on your shell's rc file:
# EXEC_COMMAND=<commmand>

# Settings below should be either true or false.

interrupt_message="${interrupt_message:='Countdown stopped by user interrupt.'}"

"${NOTIFY:=true}"         # Display timeup message as desktop notification.

"${show_popup:=true}"     # Display timeup message as pop-up window.

"${NO_OUTPUT:=false}"     # Do not show timeup message.

"${show_progress_bar:=false}" # Progress bar visibility.

"${update_tab_title:=true}"   # Print countdown time to tab title.

"${CLEAR_SCREEN:=false}"      # Clear screen at timeup.

"${debug_mode:=false}"        # Print debug.

"${be_silent:=false}"         # Run silently: no output during countdown.

readonly default_timeup_message='Time is up!'
readonly version="0.1"
readonly SEC_PER_MIN=60
readonly SEC_PER_HOUR=$((SEC_PER_MIN * 60))
readonly SEC_PER_DAY=$((SEC_PER_HOUR * 24))
time_now=$(date +%s)

# Defaults for progress bar
row=7
total_time=0
col=$(tput cols)
col=$(( col -5 ))

# TODO: laita notify ja pop-up -messageihin, että titlen vaihto onnistuu.

show_hint () {

# TODO Add messages to examples
echo "\
Timer can be set to count amount of time or until given clock time. One of three
different forms can be used:

Usage, countdown amount of time:
  $("basename" "$0") [-f | --force] NUMBER[SUFFIX]... [options] [message]
  $("basename" "$0") [-f | --force] [hours:][minutes:]<seconds> [options] [message]

  Suffix can be: [s]econds, [m]inutes (default), [h]ours. Many NUMBER[SUFFIX]
  can be used separated by space. Use quotations marks if message consists
  several word or special characters.

Until given time:
  $("basename" "$0") [-f | --force] at [hours:][minutes:]seconds [options] [message]

Examples:
  $("basename" "$0") 10 'Remember the oven'   Countdown 10 minutes.
  $("basename" "$0") 4m 'Tea is ready!'   Coundown 4 minutes with message.
  $("basename" "$0") 3m 30s   Countdown 3 minutes and 30 seconds
  $("basename" "$0") 2:25     Countdown 2 minutes and 25 seconds
  $("basename" "$0") 3:15:00  Countdown 3 hours and 15 minutes.
  $("basename" "$0") at 22:15 Countdown until 22:15 o'clock (10:15 PM).

Main options:
  -c, --command <command>  Execute command <command> on timeup.
  -n, --notify  Display timeup message as a desktop notification using notify-send.
  -p, --pop-up  Same as a graphical popup -window using zenity.
Other options:
  -f, --force   Force execute. This option must be located before 'at'.
  -h, --help    Display this help and exit.
  -b, --bar     Show a progress bar.
  -q, --quiet   Do not show any timeup message.
  -s, --silent  Do not show any output during countdown.
  -v, --version Show version info."
}

# function to get seconds from (hours,minutes,seconds)
# usage: print_seconds days hours minutes secondss
print_seconds () {
  if [[ $# -ne 4 ]]; then
    echo "Error: function print_seconds takes 4 parameters" >&2
    exit 1
  fi
  # hours, minutes, seconds
  result=$(( "$result" + $2 * 3600 + $3 * 60 + $4 ))
  echo "$result"
}

# Correct date by trying to add some time to it.
# usage: correct_date_sec seconds
correct_date_sec () {
  final=$1
  if [[ "$final" -gt 0 ]]; then
    echo "$final"
    return
  fi
  SEC_PER_DAY=$(( 360 * 24 ))
  final=$(( $1 + SEC_PER_DAY ))
  if [[ "$final" -gt 0 ]]; then
    echo "$final"
    return
  fi
  echo "0"
}

# If no parameters is given, print help.
if [[ $# -eq 0 ]]; then
  show_hint
  exit 1
fi

# identify the time format and assign number of seconds by print_seconds.
assign_time () {
  # H:M:S
  if [[ "$parameter" =~ ^([0-9]+):([0-9]+):([0-9]+)$ ]]; then
    sec_rem=$(print_seconds 0 BASH_REMATCH[1] BASH_REMATCH[2] BASH_REMATCH[3])
  # M:S
  elif [[ "$parameter" =~ ^([0-9]+):([0-9]+)$ ]]; then
    sec_rem=$(print_seconds 0 0 BASH_REMATCH[1] BASH_REMATCH[2])
  # M. Defaults if number is given without letter.
  elif [[ "$parameter" =~ ^([0-9]+)$ ]]; then
    sec_rem=$(print_seconds 0 0 BASH_REMATCH[1] 0)
  # Verbal formats, seconds (if time unit starts with 's').
  elif [[ "$parameter" =~ ^([0-9]+)s(.*) ]]; then
    sec_more=$(print_seconds 0 0 0 BASH_REMATCH[1])
  # Add to existing time so they can be combined.
    sec_rem=$(( sec_rem + sec_more))
  # Minutes
  elif [[ "$parameter" =~ ^([0-9]+)m(.*) ]]; then
    sec_more=$(print_seconds 0 0 BASH_REMATCH[1] 0)
    sec_rem=$(( sec_rem + sec_more))
  # Hours
  elif [[ "$parameter" =~ ^([0-9]+)h(.*) ]]; then
    sec_more=$(print_seconds 0 BASH_REMATCH[1] 0 0)
    sec_rem=$(( sec_rem + sec_more))
  else
    if [[ "${previous_parameter:0:1}" == "-" ]]; then
      echo "Error: Not a valid option: \"$previous_parameter\". \
Type $("basename" "$0") -h for help." >&2
      exit 1
    else
      timeup_message=$parameter
      # echo "Error: Couldn't parse time format for: \"$parameter\".
      # Type $("basename" "$0") -h for help."
      # exit 1
    fi
  fi
}

# Set countdown at certain clock time.
set_at_time() {
  UNTIL=$(date -d "$parameter" +%s)
  if [[ $? -ne 0 ]]; then
    exit 1
  fi
  sec_rem=$(( UNTIL - time_now ))
  if [[ $sec_rem -lt 1 ]]; then
    sec_rem=$(correct_date_sec $sec_rem)
    if [[ "$sec_rem" -lt 1 ]]; then
      echo "Error: The date $parameter is already history." >&2
      exit 1
    fi
    # there's no "-f" option
    if [[ -z "$NO_CONFIRM" ]]; then
      # confirm for the correction
      echo "Warning: The given date is assumed to be: $(date -d now\ +"$sec_rem"\ sec)"
      echo "Place an option -f before -d to suppress this warning"
      read -n 1 -p -r "Still proceed [Y]/n?" ch
      echo
      if [[ "$ch" == "n" || "$ch" == "N" ]]; then
        exit 1
      fi
      ch=""
    fi
  fi
}

# Parse command line options
sec_rem=0      # remaining seconds
previous_parameter=""
while [[ $# -gt 0 ]]; do
    parameter=$1; shift
    if [[ "${parameter:0:1}" == "-" ]]; then
        case "$parameter" in
            -f | --force  ) NO_CONFIRM=true ;;
            -q | --quiet  ) NO_OUTPUT=true ;;
            -b | --bar    ) show_progress_bar=true ;;
            -p | --pop-up ) show_popup=true ;;
            -h | --help   ) show_hint ;;
            -s | --silent ) be_silent=true ;;
            --version) echo "Terminal Timer version: " $version; exit 0 ;;
        esac
        previous_parameter="$parameter"
        continue
    fi
    if [[ "$parameter" == at ]]; then
      previous_parameter="$parameter"
      continue
    fi
    case "$previous_parameter" in
        at ) set_at_time ;;
            # set message output sent when timeup.
        -c | --command) # execute a command on timeup.
            EXEC_COMMAND="$parameter"
            row=$((row + 3)) ;;
        *) assign_time ;;
    esac
    previous_parameter=""
done

# check whether a correct time is assigned
if [[ $sec_rem -eq 0 ]]; then
    # TODO: ajan asettamiseen liittyvän ohjeistuksen voisi näyttää.
    echo "Error: Incorrect time format: $parameter" >&2
    exit 1
fi

# calculate the date when time up
until_date=$(( time_now + sec_rem ))

# Total countdown time in seconds. This is constant unlike sec_rem.
total_time=$(( until_date - $(date +%s) ))

# quit function
# usage: quit exitcode [message]
quit () {
    tput cnorm # restore cursor
    stty echo  # restore keyboard echo

    if [[ $CLEAR_SCREEN == true ]]; then
      clear
    fi
    # Exit if countdown is interrupted.
    if [[ "$1" -ne 0 ]]; then
      exit "$1"
    fi

    # execute command on timeup is it's assigned.
    [[ "$1" -eq 0 ]] && [[ -n "$EXEC_COMMAND" ]] && eval "$EXEC_COMMAND"

    # Print message unless no output -option is set or there are no message.
    if [[ $NO_OUTPUT != true ]] && [ -n "$2" ]; then # print message
        if [[ $show_popup = true ]]; then
            # TODO: test if zenity exists. other solutions to show pop-ups?
            if command -v zenity &>/dev/null; then
              zenity --info --title="Timer" --text="$2" 2>/dev/null
            else
              echo "Error: Displaying popups needs Zenity to be installed."
            fi
        else
            # Send a notification if set.
            [[ $NOTIFY = true ]] && notify-send "Timer" "$2"
            # Display message on terminal.
            echo "$2"
        fi
    fi
    exit "$1"
}
trap 'quit 1 "$interrupt_message"' INT  # set the quit function to be the Control+C handler

# print tab title
# usage: print_title [title]
print_title () {
  # Some terminals accept only different commands.
  case "$terminal" in
    yakuake)
      # Doesn't work if we are root.
      [[ "$EUID" == 0 ]] && return
      # Yakuake uses qdbus to set titles.
      qdbus org.kde.yakuake /yakuake/tabs setTabTitle "$session_id" "$tab_title" ;;
    terminator)
      printf '\033]0;%s\a' "$tab_title" ;;
    *) printf '\e]1;%s\a' "$tab_title" ;;
  esac
}

# checks if we are running terminal which needs different commands for settings
# a tab title.ausage: check_terminal
check_terminal () {
  if pgrep "yakuake" &> /dev/null; then
    readonly terminal=yakuake
    # .. find find out the right Yakuake session_id if we aren't root.
    # It's used to send commands to Yakuake like to set tab titles in titles.zsh.
    if [[ ! $UID == 0 ]] ; then
      session_id="$(qdbus org.kde.yakuake /yakuake/sessions sessionIdList |\
        tr , "\n" | sort -g | tail -1 | tr -d '\n')"
    fi
  elif pgrep "terminator" &> /dev/null; then
    readonly terminal=terminator
  fi
}

# print a progress bar
# usage: show_progress_bar
show_progress_bar () {
  # Tämän pitäis mennä kuin sekunnit eteenpäin, mutta menee hieman nopeampaa ja
  # epäsynkkaan.
  # progress=$[$progress + 1]
  # progress=$[$total_time - $sec_rem]
  # Progress bar character length
  bar_length=$(( col * percent / 100 ))
  # sec_done=$[$total_time - $sec_rem]
  printf "["
  # printf "%*s" $COLUMNS "]"

  # Assign output to variable f which is used in next command.
  printf -v f "%${bar_length}s>"

  # printf -v f "%$(echo $bar_length)s>"
  printf "%s\r" "${f// /=}"

  # Print the "]" to the end of bar.
  # TODO: rivi muuttuja row määrittely ei toimi, jos title tai message on yli
  # rivin mittainen. pitäisi saada silleen, että riviä ei tarvi erikseen
  # määritellä, vaan tekee samalle riville, mihin edellinen komento.
  tput cup $row $(( col + 2 ))

  printf "]\n\n"
  if [[ $debug_mode == "true" ]]; then
    echo "Debug:                       "
    echo "Total time: " $total_time "  "
    echo "Remaining:  " $sec_rem "     "
    echo "Bar length  " $bar_length "  "
    echo "                             "
  fi
  # percent=$[$progress * 100 / $total_time]
}

# If silent attribute is given countdown with no output.
silent_countdown() {
  while [[ $sec_rem -gt 0 ]]; do
    # calculate remaining seconds
    sec_rem=$(( until_date - time_now ))

    # Calculate progress percent.
    percent=$(( (total_time - sec_rem) * 100 / total_time ))

    # Calculate the date of timeout once
    if [[ -z "$TIMEOUT_DATE" ]]; then
      TIMEOUT_DATE=$(date -d "now +$sec_rem sec" )
    fi
    # wait for 0.9 second and monitor user input
    read -r -n 1 -t 1 ch
    if [[ "$ch" == q ]]; then
      quit 1 "$interrupt_message"
    fi
  done

  message="${timeup_message:=$default_timeup_message}"
  quit 0 "$message"
}

# Prepare screen for countdown.
prepare_screen() {
  clear
  # tput cup 0 0
  # hide cursor
  tput civis
  # disable keyboard echo
  stty -echo
}

if_running_background() {
  if [[ $(ps -o stat= -p $$) != *+* ]]; then
    return 0
  else
    return 1
  fi
}

if [[ $be_silent == true ]] || if_running_background; then
  silent_countdown
fi

check_terminal
prepare_screen

# countdown
while [[ $sec_rem -gt 0 ]]; do
    # Calculate remaining seconds
    sec_rem=$(( until_date - $(date +%s) ))

    # Calculate progress percent.
    percent=$(( (total_time - sec_rem) * 100 / total_time ))

    # Calculate the date of timeout once
    [[ -z "$TIMEOUT_DATE" ]] && TIMEOUT_DATE=$(date -d "now +$sec_rem sec" )

    interval=$sec_rem
    seconds=$(( interval % SEC_PER_MIN ))
    interval=$(( interval - seconds ))
    minutes=$(( interval % SEC_PER_HOUR / SEC_PER_MIN ))
    interval=$(( interval - minutes ))
    hours=$(( interval % SEC_PER_DAY / SEC_PER_HOUR ))
    interval=$(( interval - hours ))

    if [[ $update_tab_title != "false" ]]; then
        # Format nice remaining time for a tab title.
        if [ $hours -gt 0 ]; then
            tab_title=$(printf "%1d:%02d:%02d" "$hours" "$minutes" "$seconds")
        elif [ $minutes -gt 0 ]; then
            tab_title=$(printf "%1d:%02d" "$minutes" "$seconds")
        else
            tab_title=$seconds
        fi
        print_title $tab_title
    fi
    tput home # move cursor back to (0,0)

    echo "Now:   $(date)"
    echo "Until: $TIMEOUT_DATE"
    printf "%0.s-" {1..33}
    echo

    # Check how many lines we need for output once.
    if [[ -z $lines ]]; then
        if [ $hours -gt 0 ]; then lines=3
        elif [ $minutes -gt 0 ]; then lines=2
        else lines=1
        fi
    fi

     # Print necessary lines based on the original time.
     [[ $lines -ge 3 ]] && echo "Hours:    $hours                     "
     [[ $lines -ge 2 ]] && echo "Minutes:  $minutes                   "
     printf "Seconds:  $seconds"
     printf "%0.s " {1..33}
     echo -e "\nProgress: $percent %                 "
     printf "%0.s " {1..33}
     echo

    [[ $show_progress_bar == true ]] && show_progress_bar

     if [[ -n "$EXEC_COMMAND" ]]; then
        echo "Executing following command on timeup:"
        echo -e "$EXEC_COMMAND\n"
     fi

     echo "Press [q] to stop counting           "
     printf "%0.s " {1..33}

     # wait for 0.9 second and monitor user input
     read -n 1 -t 0.9 ch
     [[ "$ch" == "q" ]] && quit 1 "$interrupt_message"
done

quit 0 "${timeup_message:=$default_timeup_message}"
