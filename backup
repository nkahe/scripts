#!/bin/bash

# Backup script for personal use. Powered by Borg Backup.
# 
# Backup files that are not excluded to external hdd if it's available.
# Otherwise internal hdd is used.
#
# Backep up always
#
# $HOME
# /etc

# Additionally when run as root
#
# /boot/efi
# /root
# /usr/local/bin, sbin, etc, src
# /var

# Parameters: message [error code]
function die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

function print_help() {
  printf 'Usage: %s [-v|--version]\n' "$0"
	printf '\t%s\n' "-v, --version: Prints version"
}

function parse_commandline() {
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -v|--version)
				echo "Version 1.0"
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "Error: Got an unexpected argument '$1'" 1
				;;
		esac
    # For possible future use.
		shift
	done
}

if ! command -v borg &> /dev/null; then
  die "Fatal error: Borg Backup not found." 127
fi

parse_commandline "$@"

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

function backup_to_internal() {
  local repo="$1"
  info "Backing up main SSD to internal HDD."
  borg create             \
      --verbose           \
      --filter AM         \
      --list              \
      --stats             \
      --show-rc           \
      --compression lz4   \
      --exclude-caches    \
      --exclude-from "$BORG_CONFIG_DIR/exclude-global" \
      --exclude-from "$BORG_CONFIG_DIR/exclude-home" \
      --exclude "$HOME/hdd" \
      --exclude "/etc/udev" \
      "$repo::ryzen-home_{now:%d-%m-%Y}" \
      "$HOME"  \
      /etc
  backup_exit=$?
  prune "$repo"
}

# Music & Opiskelu-arkisto: omat repot näille.
function backup_to_external() {
  info "Backing up from internal disks to external."
  local repo="$1"
  borg create       \
      --verbose     \
      --filter AM   \
      --list        \
      --stats       \
      --compression lz4    \
      --exclude-from "$BORG_CONFIG_DIR/exclude-global" \
      --exclude-from "$BORG_CONFIG_DIR/exclude-home" \
      --exclude-from "$BORG_CONFIG_DIR/exclude-hdd" \
      "$repo::ryzen-user_{now:%d-%m-%Y_%R}" \
      "$HOME" \
      /etc
  backup_exit=$?
  prune "$repo"
}

function backup_root() {
  # /var/lib pysähtyy aina, jos ei ole excludessa.
  local repo="$1"
  echo "Backing up root files"
  borg create              \
      --verbose            \
      --filter AM          \
      --list               \
      --stats              \
      --compression lz4    \
      --exclude-caches     \
      --exclude-from "$BORG_CONFIG_DIR/exclude-global" \
      --exclude "/var/lib"  \
      --exclude "/var/log"  \
      --exclude "/var/lock" \
      "$repo::ryzen-root_{now:%d-%m-%Y_%R}"   \
      /boot/efi \
      /etc      \
      /root     \
      /usr/local/bin   \
      /usr/local/sbin  \
      /usr/local/etc   \
      /usr/local/src   \
      /var
  backup_exit=$?
  prune "$repo"
}

# Paths
external="/mnt/ext-hdd/borg-repos"
internal="$HOME/hdd/Backups"
BORG_CONFIG_DIR="$HOME/.config/borg"

if [[ ! -f "$BORG_CONFIG_DIR/exclude-global" ]]; then
  die "Borg-exclude file not found: '$BORG_CONFIG_DIR/exclude-global'" 1
fi

# If external HDD is connected and accessible.
if [[ -d "$external/desktop" ]]; then
  if [[ $EUID == 0 ]]; then
    backup_root "$external/root"
  else
    backup_to_external "$external/desktop"
  fi
# If internal HDD is accessible
elif [[ -d $internal ]]; then
  if [[ $EUID == 0 ]]; then
    backup_root "$internal/borg-root"
  else
    backup_to_internal "$internal/borg-repo-home"
  fi
else
    die "fatal: Target not found: $internal or $external/-desktop"
fi

# Setting this, so you won't be asked for your repository passphrase:
# export BORG_PASSPHRASE=''
# or this to ask an external program to supply the passphrase:
# export BORG_PASSCOMMAND='pass show backup'

# Use the `prune` subcommand to maintain daily, weekly and monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:
function prune() {
  local repo="$1"
  info "Pruning repository"
  borg prune             \
      --list             \
      --show-rc          \
      --keep-daily    7  \
      --keep-weekly   4  \
      --keep-monthly  3  \
    "$repo"
  prune_exit=$?
}

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [[ ${global_exit} -eq 1 ]]; then
    info "Backup and/or Prune finished with a warning"
elif [[ ${global_exit} -gt 1 ]]; then
    info "Backup and/or Prune finished with an error"
fi

exit ${global_exit}
